SELECT *
FROM work_from_anywhere_salary_data;

CREATE TABLE stage AS
SELECT * FROM work_from_anywhere_salary_data;

SELECT *
FROM stage;

SELECT `Currency`
FROM stage
GROUP BY `Currency`;

SELECT `Salary (Annual)`, `Currency`, 
		ROUND(CASE
        WHEN `Currency` = 'AUD' THEN `Salary (Annual)` * 0.64
        WHEN `Currency` = 'INR' THEN `Salary (Annual)` * 0.012
        WHEN `Currency` = 'EUR' THEN `Salary (Annual)` * 1.14
        WHEN `Currency` = 'GBP' THEN `Salary (Annual)` * 1.35
        ELSE `Salary (Annual)` END , 2) AS NewSalary
FROM stage;

SET SQL_SAFE_UPDATES = 0;

ALTER TABLE stage
ADD COLUMN `Salary(USD)` DECIMAL (10,2);

UPDATE stage
SET `Salary(USD)` = ROUND(CASE
        WHEN `Currency` = 'AUD' THEN `Salary (Annual)` * 0.64
        WHEN `Currency` = 'INR' THEN `Salary (Annual)` * 0.012
        WHEN `Currency` = 'EUR' THEN `Salary (Annual)` * 1.14
        WHEN `Currency` = 'GBP' THEN `Salary (Annual)` * 1.35
        ELSE `Salary (Annual)` END , 2);

# HOW MANY JOBS ARE BASED ON LOCATIONS
SELECT COUNT(`LOCATION`) AS `JOBS`, `LOCATION`
FROM stage
GROUP BY `LOCATION`
ORDER BY `JOBS` DESC;

# HOW MANY INDUSTRIES ARE LISTED
SELECT `INDUSTRY`
FROM stage
GROUP BY `INDUSTRY`;

# WHICH JOBS OFFER SALARIES ABOVE CERTAIN THRESHOLD IN USD
SELECT `JOB TITLE`
FROM stage
WHERE `SALARY(USD)` > (SELECT AVG(`SALARY(USD)`) FROM stage)
GROUP BY `JOB TITLE`;

# TOP MOST COMMON COMPANY
SELECT COUNT(`COMPANY`) AS `NUMBER` , `COMPANY`
FROM stage
GROUP BY `COMPANY`
ORDER BY `NUMBER` DESC
LIMIT 1;

# WHAT IS THE AVG SALARY FOR EACH INDUSTRY
SELECT ROUND(AVG(`SALARY(USD)`), 2) AS `AVG_SALARY`, `INDUSTRY`
FROM stage
GROUP BY `INDUSTRY`
ORDER BY `AVG_SALARY` DESC;

# FIND THE TOP 5 COMPANIES WITH HIGHEST AVG SALARY
WITH TEMP AS (SELECT AVG(`SALARY(USD)`) AS `AVGSAL`, `COMPANY` FROM stage GROUP BY `COMPANY`)
SELECT ROUND(`AVGSAL`, 2), `COMPANY`
FROM TEMP
ORDER BY `AVGSAL` DESC
LIMIT 5;

# MOST COMMON JOB TITLES FOR ENTRY LEVEL
SELECT `JOB TITLE`, COUNT(`EXPERIENCE LEVEL`) AS `COUNT`
FROM stage
WHERE `EXPERIENCE LEVEL` = 'Entry'
GROUP BY `JOB TITLE`
ORDER BY `COUNT` DESC
LIMIT 1;

# JOBS THATS REQUIRE BOTH SQL AND PYTHON
SELECT `JOB TITLE`
FROM stage
WHERE `TechStack1` = 'SQL' OR `TechStack1` = 'Python'
AND `TECHSTACK2` = 'SQL' OR `TECHSTACK2` = 'Python'
GROUP BY `JOB TITLE`;

# ACG JOB SATISFACTION SCIRE FOR EACH EMPLOYMENT TYPE
SELECT ROUND(AVG(`JOB SATISFACTION SCORE (1-10)`), 2) AS `AVG_SCORE`, `EMPLOYMENT TYPE`
FROM stage
GROUP BY `EMPLOYMENT TYPE`
ORDER BY `AVG_SCORE` DESC;

# EACH JOB TITLE CALCULATE THE AVG YEARS SINCE LAST PROMOTION
SELECT ROUND(AVG(`LAST PROMOTION (YEARS AGO)`), 2) AS `AVG_YEARS`, `JOB TITLE`
FROM stage
GROUP BY `JOB TITLE`
ORDER BY `AVG_YEARS` DESC;

# RANK JOB TITLES WITHIN EACH INDUSTRY BY AVG SALARY
WITH TEMP AS (SELECT AVG(`SALARY(USD)`) AS `AVGSAL`, `JOB TITLE`, `INDUSTRY` FROM stage GROUP BY `JOB TITLE`, `INDUSTRY`)
SELECT RANK() OVER (PARTITION BY `INDUSTRY` ORDER BY `AVGSAL` DESC) AS SALRANK,
`JOB TITLE`, `INDUSTRY`
FROM TEMP;

# whats the most common combinations of tech stacks
WITH TEMP AS (SELECT CONCAT(LEAST(`TECHSTACK1`,`TECHSTACK2`),' + ', GREATEST(`TECHSTACK1`,`TECHSTACK2`)) AS TECH FROM stage)
SELECT COUNT(`TECH`) AS `COUNT`, `TECH`
FROM TEMP
GROUP BY `TECH`
ORDER BY `COUNT` DESC;

# IDENTIFY COMPANIES THAT CONSISTENTLY PROMOTE EMPLOYEES QUICKLY
WITH TEMP AS (SELECT `COMPANY`, AVG(`LAST PROMOTION (YEARS AGO)`) AS `AVG_PRO`
FROM stage GROUP BY `COMPANY`)
SELECT `COMPANY`, ROUND(`AVG_PRO`, 2)
FROM TEMP
ORDER BY `AVG_PRO`;

# FIND ANY MISMATCH WHERE ENTRY LEVEL JOB OFFERS A VERY HIGH SALARY
SELECT `SALARY(USD)`, `EXPERIENCE LEVEL`
FROM stage
WHERE `EXPERIENCE LEVEL` = 'Entry'
ORDER BY `SALARY(USD)` DESC;

# JOB SATISFACTION FOR TECH INDUSTRY ROLES
SELECT `INDUSTRY`, ROUND(AVG(`JOB SATISFACTION SCORE (1-10)`),2)
FROM stage
WHERE `INDUSTRY` = 'Tech'
GROUP BY `INDUSTRY`;

# DIFFERENCE BETWEEN REMOTE AND NON REMOTE JOBS
SELECT ROUND(AVG(`JOB SATISFACTION SCORE (1-10)`), 2) AS HAPPYSCORE, `REMOTE FLEXIBILITY`
FROM stage
GROUP BY `REMOTE FLEXIBILITY`;